using Content.Client.Stylesheets;
using Content.Shared.Administration;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Content.Shared._PANEL;
using Content.Client.Message;
using Robust.Client.ResourceManagement;
using Content.Client.Resources;
using Robust.Client.Utility;
using Robust.Client.Graphics;


namespace Content.Client._PANEL;

[GenerateTypedNameReferences]
public sealed partial class InteractionListEntry : BoxContainer
{
    [Dependency] private readonly IEntitySystemManager _entitySystem = default!;

    public event Action<InteractionInfo>? OnPinStatusChanged;
    private readonly SpriteSystem _sprites;
    public InteractionListEntry()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _sprites = _entitySystem.GetEntitySystem<SpriteSystem>();
    }

    public void Setup(InteractionInfo info, Func<InteractionInfo, string, string>? overrideText)
    {
        Update(info, overrideText);
        InteractionEntryPinButton.OnPressed += HandlePinButtonPressed(info);
        InteractionTextureButton.TextureNormal = _sprites.Frame0(info.Icon);
        InteractionTextureButton.OnPressed += _ => ContentsContainer.Visible = !ContentsContainer.Visible;
        SetDescriptionText(info);
    }
    private Action<BaseButton.ButtonEventArgs> HandlePinButtonPressed(InteractionInfo info)
    {
        return args =>
        {
            info.IsPinned = !info.IsPinned;
            UpdatePinButtonTexture(info.IsPinned);
            OnPinStatusChanged?.Invoke(info);
        };
    }

    private void SetDescriptionText(InteractionInfo info)
    {
        Contents.GetMessage();
        Contents.SetMarkup($"[font size=11]{info.Description}[/font]");
        ERPAllowed.SetMarkup(ErpAllowedString(info));
    }

    private static string ErpAllowedString(InteractionInfo info)
    {
        if (info.Erp)
            return Loc.GetString("erp-allowed");
        else 
            return Loc.GetString("erp-not-allowed");
    }

    private void Update(InteractionInfo info, Func<InteractionInfo, string, string>? overrideText)
    {
        InteractionEntryLabel.Text = overrideText?.Invoke(info, $"{info.Name}") ??
                                $"{info.Name}";

        UpdatePinButtonTexture(info.IsPinned);
    }

    private void UpdatePinButtonTexture(bool isPinned)
    {
        if (isPinned)
        {
            InteractionEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonUnpinned);
            InteractionEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonPinned);
        }
        else
        {
            InteractionEntryPinButton?.RemoveStyleClass(StyleNano.StyleClassPinButtonPinned);
            InteractionEntryPinButton?.AddStyleClass(StyleNano.StyleClassPinButtonUnpinned);
        }
    }
}
